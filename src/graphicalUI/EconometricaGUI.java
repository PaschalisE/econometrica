/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicalUI;

import externalCommunication.CSVReader;
import externalCommunication.DBController;
import java.awt.Toolkit;
import externalCommunication.parser.RootJsonToCountryDatasetMapper;
import externalCommunication.JsonManager;
import externalCommunication.parser.RootJson;
import java.io.IOException;
import java.util.Collection;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.SwingConstants;
import model.Country;
import model.CountryData;
import model.CountryDataset;

public class EconometricaGUI extends javax.swing.JFrame {

    /**
     * Creates new form econometricaUI
     */
    public EconometricaGUI() {
        initComponents();
        setIcon();
        this.setLocationRelativeTo(null);
        
        //διαβάζει το csv αρχείο
        CSVReader cr = new CSVReader();
        //καλεί την getKey του CSVReader HashMap για να γεμίσει το combobox με τα ονόματα των χωρών 
        int i = 0;
        for (Map.Entry<String, String> entry : CSVReader.getCountryCodeAndName().entrySet()) {

            if (i == 0) {
                i++;
                continue;
            }
            countryComboBox.addItem(entry.getKey());
        }
        this.setVisible(true);
    }
    // Δήλωση μεταβλητών κι αντικειμένων 
    private String choosenCountry = "";
    private String isoCode = "";
    private Country country = new Country(isoCode, choosenCountry);
    private RootJson jsonOilObject;
    private RootJson jsonGdpObject;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countryComboBox = new javax.swing.JComboBox<>();
        fetchDataButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        AboutButton = new javax.swing.JButton();
        savedToDBCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        oilDatasetNameLabel = new javax.swing.JLabel();
        oilStartDateLabel = new javax.swing.JLabel();
        oilEndDateLabel = new javax.swing.JLabel();
        gdpDatasetLabel = new javax.swing.JLabel();
        gdpStartDateLabel = new javax.swing.JLabel();
        gdpEndDateLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        oilTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        gdpTable = new javax.swing.JTable();
        BackgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("econometrica");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setResizable(false);
        getContentPane().setLayout(null);

        countryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(countryComboBox);
        countryComboBox.setBounds(80, 80, 440, 22);

        fetchDataButton.setBackground(new java.awt.Color(153, 153, 255));
        fetchDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_search_50px.png"))); // NOI18N
        fetchDataButton.setLabel("Fetch Data");
        fetchDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchDataButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fetchDataButton);
        fetchDataButton.setBounds(560, 70, 150, 50);

        saveButton.setBackground(new java.awt.Color(204, 255, 204));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_save_50px.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(80, 550, 120, 50);

        plotButton.setBackground(new java.awt.Color(255, 255, 204));
        plotButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_combo_chart_50px.png"))); // NOI18N
        plotButton.setText("Plot");
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });
        getContentPane().add(plotButton);
        plotButton.setBounds(240, 550, 120, 50);

        deleteAllButton.setBackground(new java.awt.Color(255, 153, 153));
        deleteAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_delete_50px.png"))); // NOI18N
        deleteAllButton.setText("Delete all");
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteAllButton);
        deleteAllButton.setBounds(400, 550, 140, 50);

        AboutButton.setBackground(new java.awt.Color(255, 204, 204));
        AboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_information_50px.png"))); // NOI18N
        AboutButton.setAutoscrolls(true);
        AboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AboutButton);
        AboutButton.setBounds(780, 10, 50, 50);

        savedToDBCheckBox.setText("Already saved in Database");
        savedToDBCheckBox.setToolTipText("");
        savedToDBCheckBox.setBorder(null);
        savedToDBCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedToDBCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(savedToDBCheckBox);
        savedToDBCheckBox.setBounds(600, 560, 171, 17);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Select country:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(90, 50, 120, 17);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Oil Data");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(120, 150, 53, 17);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Dataset Name:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(120, 170, 150, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Available timespan:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(72, 243, 132, 17);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Start date:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(72, 278, 90, 16);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("End date:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(72, 301, 80, 16);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("GDP Data");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(510, 150, 65, 17);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Dataset Name:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(510, 170, 102, 17);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Available timespan:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(460, 243, 132, 17);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setText("Start date:");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(460, 278, 80, 16);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel12.setText("End date:");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(460, 301, 90, 16);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_us_dollar_50px_1.png"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(460, 140, 50, 50);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/icons8_gas_station_50px_5.png"))); // NOI18N
        getContentPane().add(jLabel13);
        jLabel13.setBounds(70, 140, 50, 50);

        oilDatasetNameLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        oilDatasetNameLabel.setText("Please select Country");
        oilDatasetNameLabel.setToolTipText("");
        getContentPane().add(oilDatasetNameLabel);
        oilDatasetNameLabel.setBounds(70, 190, 310, 20);

        oilStartDateLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        oilStartDateLabel.setText("-");
        getContentPane().add(oilStartDateLabel);
        oilStartDateLabel.setBounds(170, 280, 130, 16);

        oilEndDateLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        oilEndDateLabel.setText("-");
        getContentPane().add(oilEndDateLabel);
        oilEndDateLabel.setBounds(170, 300, 130, 16);

        gdpDatasetLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        gdpDatasetLabel.setText("Please select Country");
        gdpDatasetLabel.setToolTipText("");
        getContentPane().add(gdpDatasetLabel);
        gdpDatasetLabel.setBounds(460, 190, 300, 20);

        gdpStartDateLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        gdpStartDateLabel.setText("-");
        getContentPane().add(gdpStartDateLabel);
        gdpStartDateLabel.setBounds(560, 280, 130, 16);

        gdpEndDateLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        gdpEndDateLabel.setText("-");
        getContentPane().add(gdpEndDateLabel);
        gdpEndDateLabel.setBounds(560, 300, 130, 16);

        oilTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        oilTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(oilTable);
        if (oilTable.getColumnModel().getColumnCount() > 0) {
            oilTable.getColumnModel().getColumn(0).setResizable(false);
            oilTable.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(72, 345, 300, 175);

        gdpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gdpTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(gdpTable);
        if (gdpTable.getColumnModel().getColumnCount() > 0) {
            gdpTable.getColumnModel().getColumn(0).setResizable(false);
            gdpTable.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(460, 345, 300, 175);

        BackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visuals/background.jpg"))); // NOI18N
        BackgroundLabel.setMaximumSize(new java.awt.Dimension(6016, 4016));
        BackgroundLabel.setMinimumSize(new java.awt.Dimension(830, 680));
        getContentPane().add(BackgroundLabel);
        BackgroundLabel.setBounds(-280, -190, 6000, 990);

        setBounds(50, 50, 848, 677);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        // Δημιουργία μηνύματος επιβεβαίωσης
        int a = JOptionPane.showConfirmDialog(null, "Θέλετε να διαγράψετε όλα τα δεδομένα;", "Διαγραφή Δεδομένων", JOptionPane.YES_NO_OPTION);
        //Αν επιλέξει YES καλεί την μέθοδο crlTable της DBController 
        if (a == JOptionPane.YES_OPTION) {
            DBController.clrTable();
            
            // και σβήνει τα δεδομένα από τα jTables
            DefaultTableModel defTableMod = new DefaultTableModel();
            defTableMod.setColumnIdentifiers(new String[]{"Year", "Value"});
            oilTable.setModel(defTableMod);
            gdpDatasetLabel.setText("Please select Country");
            gdpStartDateLabel.setText("-");
            gdpEndDateLabel.setText("-");
            gdpTable.setModel(defTableMod);
            gdpDatasetLabel.setText("Please select Country");
            gdpStartDateLabel.setText("-");
            gdpEndDateLabel.setText("-");
        }
  
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // Καλεί την dbSaver για την αποθήκευση των Country, CountryDataset και CountryData
            DBController.dbSaver(country);
        } catch (Exception ex) {
            Logger.getLogger(EconometricaGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        saveButton.setEnabled(false);
        savedToDBCheckBox.setSelected(true);
        
    }//GEN-LAST:event_saveButtonActionPerformed

    @SuppressWarnings("empty-statement")
    private void countryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countryComboBoxActionPerformed

    private void fetchDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchDataButtonActionPerformed
        // Για την επιλεγμένη χώρα, βρίσκει το isoCode της στο Map της CSVReader και δημιουργεί ένα αντικείμενο Country
        choosenCountry = countryComboBox.getSelectedItem().toString();
        isoCode = "";
        for (Map.Entry<String, String> entry : CSVReader.getCountryCodeAndName().entrySet()) {
            if (choosenCountry.equals(entry.getKey())) {
                isoCode = entry.getValue();
            }
        }
        country.setIsoCode(isoCode);
        country.setName(choosenCountry);
        try {
            // Ψαχνει στην ΒΔ αν υπάρχουν δεδομένα
            boolean foundData = DBController.dbFinder(country);

            // Αν όχι, καλεί το API να πάρει δεδομένα
            if (!foundData) {
                saveButton.setEnabled(true);
                savedToDBCheckBox.setSelected(false);
                Collection<RootJson> rootJsonCollection = JsonManager.GetJson(country);
                displayDataset(RootJsonToCountryDatasetMapper.Map(rootJsonCollection, country));
            } else {
                // Αλλιώς ανακαλεί τα δεδομένα από την ΒΔ και τα εμφανίζει στο GUI
                saveButton.setEnabled(false);
                savedToDBCheckBox.setSelected(true);
                displayDataset(DBController.dbRetriever(country));
            }

        } catch (IOException ex) {
            Logger.getLogger(EconometricaGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_fetchDataButtonActionPerformed

    private void savedToDBCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savedToDBCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savedToDBCheckBoxActionPerformed

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        // Ελέγχει αν τα στοιχεία που εμφανίζονται στο GUI αντιστοιχούν στην επιλεγμένη χώρα στο combobox
        if (!countryComboBox.getSelectedItem().toString().equals(country.getName())) {
            // Αν όχι, βγάζει μήνυμα λάθους
            JOptionPane.showMessageDialog(null, "Η χώρα επιλογής δεν ταυτίζεται με τα δεδομένα στον πίνακα. \nΠατήστε Fetch Data για ανάκτηση δεδομένων", "No Data found", JOptionPane.INFORMATION_MESSAGE);
        } else if (country.getCountryDatasetCollection().isEmpty()) {
            // Έπειτα ελέγχει αν η χώρα έχει δεδομένα και αν όχι, βγαζει μήνυμα λάθους
            JOptionPane.showMessageDialog(null, "Δεν υπάρχουν δεδομένα για την επιλεγμένη χώρα", "No Data found", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Αλλιώς δημιουργεί το διάγραμμα
            LineChartEx2 ex = new LineChartEx2();
            ex.LineChartEx2(country);
            ex.setVisible(true);
        }
    }//GEN-LAST:event_plotButtonActionPerformed

    private void AboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutButtonActionPerformed
        // Εμφανίζει πληροφορίες για την εφαρμογή
        AboutUI ui = new AboutUI();
        ui.setVisible(true);
    }//GEN-LAST:event_AboutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public void mainMenu(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EconometricaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
 /*//αυτο ηταν ετσι και το αλλαξα επειδη μου το προτεινε το netbeans
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EconometricaGUI().setVisible(true);
            }
        });*/
        java.awt.EventQueue.invokeLater(() -> {
            new EconometricaGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AboutButton;
    private javax.swing.JLabel BackgroundLabel;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton fetchDataButton;
    private javax.swing.JLabel gdpDatasetLabel;
    private javax.swing.JLabel gdpEndDateLabel;
    private javax.swing.JLabel gdpStartDateLabel;
    private javax.swing.JTable gdpTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel oilDatasetNameLabel;
    private javax.swing.JLabel oilEndDateLabel;
    private javax.swing.JLabel oilStartDateLabel;
    private javax.swing.JTable oilTable;
    private javax.swing.JButton plotButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox savedToDBCheckBox;
    // End of variables declaration//GEN-END:variables

    // Εικονίδιο - logo
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/visuals/icons8_profit_40px.png")));
    }
    
    // Μέθοδος που αναθέτει στους πίνακες τις κατάλληλες εγγραφές
    public void displayDataset(Country country) {
        String oilOrGdp;
        noOilDataTable();
        noGdpDataTable();
        for (CountryDataset countryDataset : country.getCountryDatasetCollection()){
            oilOrGdp = countryDataset.getName();
            if (oilOrGdp.contains("Oil Consumption")) {
                oilDataTable(countryDataset);
            }
            else if (oilOrGdp.contains("GDP")) {
                gdpDataTable(countryDataset);
            }
        }
    }
    
    // Αν δεν υπάρχουν δεδομένα για Oil Consumption αρχικοποιεί τα αντίστοιχα πεδία και πίνακα
    public void noOilDataTable() {
        oilDatasetNameLabel.setText("Δεν βρέθηκαν δεδομένα");
        oilStartDateLabel.setText("-");
        oilEndDateLabel.setText("-");
        DefaultTableModel defTableMod = new DefaultTableModel();
        defTableMod.setColumnIdentifiers(new String[] {"error 404"});
        defTableMod.addRow(new String[] {"Δεν βρέθηκαν δεδομένα"});
        defTableMod.addRow(new String[] {"Oil Consumption για"});
        defTableMod.addRow(new String[] {country.getName()});
        DefaultTableCellRenderer defCenterer = new DefaultTableCellRenderer();
        defCenterer.setHorizontalAlignment(SwingConstants.CENTER);
        oilTable.setDefaultRenderer(Object.class, defCenterer);
        oilTable.setModel(defTableMod);
    }
    
    // Αν δεν υπάρχουν δεδομένα για GDP αρχικοποιεί τα αντίστοιχα πεδία και πίνακα
    public void noGdpDataTable() {
        gdpDatasetLabel.setText("Δεν βρέθηκαν δεδομένα");
        gdpStartDateLabel.setText("-");
        gdpEndDateLabel.setText("-");
        DefaultTableModel defTableMod = new DefaultTableModel();
        defTableMod.setColumnIdentifiers(new String[] {"error 404"});
        defTableMod.addRow(new String[] {"Δεν βρέθηκαν δεδομένα"});
        defTableMod.addRow(new String[] {"GDP για"});
        defTableMod.addRow(new String[] {country.getName()});
        DefaultTableCellRenderer defCenterer = new DefaultTableCellRenderer();
        defCenterer.setHorizontalAlignment(SwingConstants.CENTER);
        gdpTable.setDefaultRenderer(Object.class, defCenterer);
        gdpTable.setModel(defTableMod);
    }
    
    // Αν υπάρχουν δεδομένα Oil Consumption αναθέτει τις τιμές στα αντίστοιχα πεδία
    public void oilDataTable(CountryDataset countryDataset) {
        oilDatasetNameLabel.setText(countryDataset.getName());
        oilStartDateLabel.setText(countryDataset.getStartYear());
        oilEndDateLabel.setText(countryDataset.getEndYear());
        DefaultTableModel defTableMod = new DefaultTableModel();
        defTableMod.setColumnIdentifiers(new String[]{"Year", "Value"});
        for (CountryData countryData : countryDataset.getCountryDataCollection()) {
            defTableMod.addRow(new String[] {countryData.getDataYear(), countryData.getValue()});
        }
        DefaultTableCellRenderer defCenterer = new DefaultTableCellRenderer();
        defCenterer.setHorizontalAlignment(SwingConstants.CENTER);
        oilTable.setDefaultRenderer(Object.class, defCenterer);
        oilTable.setModel(defTableMod);
    }
    
    // Αν υπάρχουν δεδομένα GDP αναθέτει τις τιμές στα αντίστοιχα πεδία
    public void gdpDataTable(CountryDataset countryDataset) {
        gdpDatasetLabel.setText(countryDataset.getName());
        gdpStartDateLabel.setText(countryDataset.getStartYear());
        gdpEndDateLabel.setText(countryDataset.getEndYear());
        DefaultTableModel defTableMod = new DefaultTableModel();
        defTableMod.setColumnIdentifiers(new String[]{"Year", "Value"});
        for (CountryData countryData : countryDataset.getCountryDataCollection()) {
            defTableMod.addRow(new String[] {countryData.getDataYear(), countryData.getValue()});
        }
        DefaultTableCellRenderer defCenterer = new DefaultTableCellRenderer();
        defCenterer.setHorizontalAlignment(SwingConstants.CENTER);
        gdpTable.setDefaultRenderer(Object.class, defCenterer);
        gdpTable.setModel(defTableMod);
    }
    
}
